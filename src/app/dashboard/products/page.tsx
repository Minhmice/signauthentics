"use client";

/**
 * Products Management Page
 * Enhanced với Grid/Table view toggle, CRUD operations, và advanced features
 * Admin/Seller: Full, Editor: Read-only (no price/stock)
 */

import * as React from "react";
import { DashboardSectionHeader } from '@/app/dashboard/components/shared/RoleBadge';
import { DataTable } from "@/app/dashboard/components/shared/DataTable";
import { ProductGrid } from "@/app/dashboard/components/tables/ProductGrid";
import { ProductForm } from "./components/ProductForm";
import { ConfirmDialog } from '@/app/dashboard/components/shared/ConfirmDialog';
import {
  FilterPopover,
  FilterOption,
} from '@/app/dashboard/components/shared/FilterPopover';
import {
  ActionMenu,
  createActionItems,
} from '@/app/dashboard/components/shared/ActionMenu';
import { StatusBadge } from '@/app/dashboard/components/shared/StatusBadge';
import { Button } from "@/components/ui/button";
import { Plus, Grid3x3, List, Trash2 } from "lucide-react";
import { productsAPI, type Product } from "@/lib/mock/db";
import { formatPrice } from "@/lib/ui/price";
import { getRarityLabel } from "@/lib/ui/rarity";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";

// Filter options for products
const filterOptions: FilterOption[] = [
  {
    key: "category",
    label: "Category",
    type: "select",
    options: [
      { value: "Jersey", label: "Jersey" },
      { value: "Ball", label: "Ball" },
      { value: "Boots", label: "Boots" },
      { value: "Photo", label: "Photo" },
      { value: "Other", label: "Other" },
    ],
  },
  {
    key: "rarity",
    label: "Rarity",
    type: "select",
    options: [
      { value: "standard", label: "Standard" },
      { value: "limited", label: "Limited" },
      { value: "rare", label: "Rare" },
      { value: "ultra", label: "Ultra" },
    ],
  },
  {
    key: "status",
    label: "Status",
    type: "select",
    options: [
      { value: "active", label: "Active" },
      { value: "inactive", label: "Inactive" },
      { value: "draft", label: "Draft" },
    ],
  },
  {
    key: "priceRange",
    label: "Price Range",
    type: "number",
    placeholder: "Min price",
  },
];

export default function DashboardProductsPage() {
  const [viewMode, setViewMode] = React.useState<"grid" | "table">("grid");
  const [isFormOpen, setIsFormOpen] = React.useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = React.useState(false);
  const [selectedProduct, setSelectedProduct] = React.useState<
    Product | undefined
  >();
  const [products, setProducts] = React.useState<Product[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [filters, setFilters] = React.useState<Record<string, unknown>>({});
  const [deleteProductId, setDeleteProductId] = React.useState<string | null>(
    null
  );

  // Load products
  React.useEffect(() => {
    loadProducts();
  }, [filters]);

  const loadProducts = async () => {
    try {
      setLoading(true);
      const data = await productsAPI.getAll();
      setProducts(
        data.filter((product): product is Product => product !== null)
      );
    } catch (error) {
      toast.error("Failed to load products");
      console.error("Error loading products:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleView = (_product: Product) => {
    // TODO: Implement view product details
    toast.info("View product details");
  };

  const handleEdit = (product: Product) => {
    setSelectedProduct(product);
    setIsFormOpen(true);
  };

  const handleDelete = (product: Product) => {
    setDeleteProductId(product.id);
    setIsDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!deleteProductId) return;

    try {
      await productsAPI.delete(deleteProductId);
      setProducts(products.filter((p) => p.id !== deleteProductId));
      toast.success("Product deleted successfully");
    } catch (error) {
      toast.error("Failed to delete product");
      console.error("Error deleting product:", error);
    } finally {
      setIsDeleteDialogOpen(false);
      setDeleteProductId(null);
    }
  };

  const handleBulkDelete = async (selectedIds: string[]) => {
    try {
      await productsAPI.bulkDelete(selectedIds);
      setProducts(products.filter((p) => !selectedIds.includes(p.id)));
      toast.success(`${selectedIds.length} products deleted successfully`);
    } catch (error) {
      toast.error("Failed to delete products");
      console.error("Error deleting products:", error);
    }
  };

  const handleCreateNew = () => {
    setSelectedProduct(undefined);
    setIsFormOpen(true);
  };

  const handleDuplicate = (product: Product) => {
    const duplicatedProduct = {
      ...product,
      id: "", // Will be generated by API
      title: `${product.title} (Copy)`,
    };
    setSelectedProduct(duplicatedProduct);
    setIsFormOpen(true);
  };

  const handleSave = async (data: Record<string, unknown>) => {
    try {
      if (selectedProduct) {
        // Update existing product
        const updatedProduct = await productsAPI.update(
          selectedProduct.id,
          data as Partial<Product>
        );
        if (updatedProduct) {
          setProducts(
            products.map((p) =>
              p.id === selectedProduct.id ? updatedProduct : p
            )
          );
        }
        toast.success("Product updated successfully");
      } else {
        // Create new product
        const newProduct = await productsAPI.create(
          data as Omit<Product, "id" | "createdAt" | "updatedAt">
        );
        setProducts([...products, newProduct]);
        toast.success("Product created successfully");
      }
    } catch (error) {
      toast.error("Failed to save product");
      console.error("Error saving product:", error);
    } finally {
      setIsFormOpen(false);
    }
  };

  const handleExport = (format: string, data: Product[]) => {
    // Export logic is handled by ExportButton component
    toast.success(
      `Exported ${data.length} products as ${format.toUpperCase()}`
    );
  };

  const productColumns: ColumnDef<Product>[] = [
    {
      accessorKey: "id",
      header: "SKU",
      cell: ({ row }) => (
        <span className="font-mono text-xs">{row.original.id}</span>
      ),
    },
    {
      accessorKey: "title",
      header: "Title",
      cell: ({ row }) => (
        <div className="font-medium max-w-xs truncate">
          {row.original.title}
        </div>
      ),
    },
    {
      accessorKey: "playerId",
      header: "Player",
    },
    {
      accessorKey: "category",
      header: "Category",
    },
    {
      accessorKey: "priceVND",
      header: "Price VND",
      cell: ({ row }) => (
        <span className="font-semibold">
          {formatPrice(row.original.priceVND, "VND")}
        </span>
      ),
    },
    {
      accessorKey: "rarity",
      header: "Rarity",
      cell: ({ row }) => {
        const rarity = row.original.rarity;
        const colorMap: Record<string, string> = {
          legendary: "bg-purple-500/10 text-purple-500",
          epic: "bg-blue-500/10 text-blue-500",
          rare: "bg-green-500/10 text-green-500",
          common: "bg-zinc-500/10 text-zinc-400",
        };
        return (
          <span
            className={`px-2 py-1 text-xs rounded-full ${
              colorMap[rarity] || "bg-zinc-500/10 text-zinc-400"
            }`}
          >
            {getRarityLabel(rarity)}
          </span>
        );
      },
    },
    {
      accessorKey: "stock",
      header: "Stock",
      cell: ({ row }) => (
        <span
          className={
            row.original.stock < 10
              ? "text-red-500 font-semibold"
              : "text-zinc-300"
          }
        >
          {row.original.stock}
        </span>
      ),
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => <StatusBadge status={row.original.status} />,
    },
    {
      id: "actions",
      header: "Actions",
      cell: ({ row }) => (
        <ActionMenu
          actions={createActionItems(
            () => handleEdit(row.original),
            () => handleDelete(row.original),
            () => console.log("View product:", row.original.id)
          )}
        />
      ),
    },
  ];

  const bulkActions = [
    {
      id: "bulk-delete",
      label: "Delete Selected",
      icon: <Trash2 className="w-4 h-4" />,
      variant: "destructive" as const,
      onClick: handleBulkDelete,
    },
  ];

  return (
    <div className="space-y-6">
      <DashboardSectionHeader
        title="Products"
        description={`Quản lý sản phẩm - ${products.length} products total`}
        visibleFor={["admin", "seller"]}
        readOnlyFor={["editor"]}
        actions={
          <div className="flex items-center gap-2">
            {/* View Toggle */}
            <div className="flex items-center bg-zinc-900 border border-zinc-800 rounded-lg overflow-hidden">
              <button
                onClick={() => setViewMode("grid")}
                className={`px-3 py-2 text-sm transition-colors ${
                  viewMode === "grid"
                    ? "bg-zinc-800 text-white"
                    : "text-zinc-400 hover:text-white"
                }`}
                title="Grid view"
              >
                <Grid3x3 className="w-4 h-4" />
              </button>
              <button
                onClick={() => setViewMode("table")}
                className={`px-3 py-2 text-sm transition-colors ${
                  viewMode === "table"
                    ? "bg-zinc-800 text-white"
                    : "text-zinc-400 hover:text-white"
                }`}
                title="Table view"
              >
                <List className="w-4 h-4" />
              </button>
            </div>

            <FilterPopover
              filters={filterOptions}
              values={filters}
              onValuesChange={setFilters}
              onClear={() => setFilters({})}
            />
            <Button
              onClick={handleCreateNew}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Product
            </Button>
          </div>
        }
      />

      {/* View Content */}
      {viewMode === "grid" ? (
        <ProductGrid
          products={products}
          onEdit={handleEdit}
          onDelete={(id) => handleDelete(products.find((p) => p.id === id)!)}
        />
      ) : (
        <DataTable
          columns={productColumns}
          data={products}
          searchKey="title"
          searchPlaceholder="Search products..."
          pageSize={10}
          loading={loading}
          getRowId={(row) => row.id}
          bulkActions={bulkActions}
          onExport={handleExport}
          onRowView={handleView}
          onRowEdit={handleEdit}
          onRowDelete={handleDelete}
          onRowDuplicate={handleDuplicate}
        />
      )}

      {/* Product Form Dialog */}
      <ProductForm
        open={isFormOpen}
        onOpenChange={setIsFormOpen}
        product={selectedProduct ? { ...selectedProduct, trackInventory: true } : undefined}
        onSave={handleSave}
      />

      {/* Delete Confirmation Dialog */}
      <ConfirmDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        title="Delete Product"
        description="Are you sure you want to delete this product? This action cannot be undone."
        confirmText="Delete"
        onConfirm={confirmDelete}
        variant="destructive"
      />
    </div>
  );
}
