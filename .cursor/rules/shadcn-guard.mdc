---
alwaysApply: true
---
# Rule: shadcn guard
# Type: Contextual
# When: Any task involving UI components (React/Next.js/Tailwind)

## Intent
Protect original shadcn/ui component files from direct edits.
Enforce a wrapper/compose workflow in separate files.
Require automated visual verification via a Browser MCP screenshot before declaring a task complete.
All chat responses to the user MUST be in Vietnamese.

## Scope
Applies to any work related to components under `@/components/ui/**` (or the equivalent path used by your shadcn installation).

## Hard rules (MUST follow)
- NEVER edit, delete, or overwrite any file matching:
  - `components/ui/**`
  - `src/components/ui/**`
  - `lib/shadcn/**`
- **File size limit**: Each `.tsx` file MUST be under **200 lines**:
  - Break down large components into smaller, reusable pieces
  - Extract common logic into custom hooks (`hooks/**`)
  - Extract repeated UI patterns into shared components (`components/shared/**`)
  - Create composition-based architecture for better maintainability and debugging
- If a user requests to "modify" a shadcn/ui component, you MUST:
  1) Create a **wrapper** under:
     - `components/app/**`, `components/shared/**`, or `features/**/components/**`
  2) Import the base component from `@/components/ui/...`
  3) Customize via extended props, `className`, `asChild`, composition, or wrapper-level API/variants (DO NOT touch the original file).
  4) Do NOT copy/paste the entire original code unless a justified fork is required; if you must fork, place it under `components/_forks/**` with a clear rationale in comments.

## Wrapper checklist (before opening a PR)
- [ ] Wrapper filename matches the semantics (e.g., `components/app/button.tsx` wraps `components/ui/button.tsx`).
- [ ] Short JSDoc explaining *why* the wrapper exists.
- [ ] No deep imports from `components/ui/**` beyond the public export.
- [ ] Provide a usage example (story/docs or inline comment).
- [ ] Do not compromise shadcn updateability (original files remain untouched).

## Example
```tsx
"use client";
import * as React from "react";
import { Button as BaseButton } from "@/components/ui/button";

type AppButtonProps = React.ComponentProps<typeof BaseButton> & {
  intent?: "primary" | "danger";
};

export function AppButton({ intent = "primary", className, ...props }: AppButtonProps) {
  const intentClass =
    intent === "danger" ? "bg-destructive text-destructive-foreground" : "";
  return <BaseButton className={`${intentClass} ${className ?? ""}`} {...props} />;
}
