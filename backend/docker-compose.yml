services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    platform: linux/arm64
    container_name: signauthentics-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-football}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ops/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-football}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - signauthentics

  # MinIO S3 Storage
  minio:
    image: minio/minio:latest
    platform: linux/arm64
    container_name: signauthentics-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minhmice}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - signauthentics

  # imgproxy for image processing
  imgproxy:
    image: darthsim/imgproxy:latest
    platform: linux/arm64
    container_name: signauthentics-imgproxy
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: ":8080"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /tmp
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_AUTO_WEBP: "true"
      IMGPROXY_ENABLE_CLIENT_HINTS: "true"
      IMGPROXY_QUALITY: 80
      IMGPROXY_FORMAT: "webp"
      IMGPROXY_S3_ENDPOINT: "http://minio:9000"
      IMGPROXY_S3_REGION: "us-east-1"
      IMGPROXY_S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minhmice}
      IMGPROXY_S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      IMGPROXY_S3_BUCKET: ${S3_BUCKET:-media}
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - signauthentics

  # Redis Cache
  cache:
    image: valkey/valkey:7-alpine
    platform: linux/arm64
    container_name: signauthentics-cache
    restart: unless-stopped
    command: valkey-server /etc/valkey/valkey.conf
    volumes:
      - ./ops/redis.conf:/etc/valkey/valkey.conf:ro
      - redis_data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - signauthentics

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.3
    platform: linux/arm64
    container_name: signauthentics-meilisearch
    restart: unless-stopped
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - signauthentics

  # Next.js Web Application
  web:
    image: ghcr.io/minhmice/signauthentics:latest
    platform: linux/arm64
    container_name: signauthentics-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-football}
      REDIS_URL: redis://cache:6379
      MEILISEARCH_URL: http://meilisearch:7700
      MEILISEARCH_KEY: ${MEILI_MASTER_KEY}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minhmice}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET:-media}
      S3_REGION: us-east-1
      IMGPROXY_URL: http://imgproxy:8080
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      NEXT_PUBLIC_IMGPROXY_BASE: https://img.minhmice.com
      NEXT_PUBLIC_S3_BUCKET: ${S3_BUCKET:-media}
      NEXTAUTH_URL: https://app.minhmice.com
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      cache:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      imgproxy:
        condition: service_healthy
    networks:
      - signauthentics

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    platform: linux/arm64
    container_name: signauthentics-tunnel
    restart: unless-stopped
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./cloudflared/config.yml:/etc/cloudflared/config.yml:ro
      - ./cloudflared/credentials.json:/etc/cloudflared/credentials.json:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - signauthentics

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local

networks:
  signauthentics:
    driver: bridge